name: Build and Deploy

# Trigger workflow on both push (to the main branch) and manually (workflow_dispatch)
on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  workflow_dispatch:  # Allows triggering the workflow manually (for deploy)
    inputs:
      environment:
        description: 'Select the environment for deployment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production
        default: dev  # Default environment to be used if no manual input is provided
      TAG_NAME:
        description: 'Tag name for the image to deploy'
        required: false
        default: 'dev'  # Default value for TAG_NAME when not provided

jobs:
  build:
    runs-on: ubuntu-latest
    # Run the build if the event is push OR if the environment is 'dev'
    if: ${{ github.event_name == 'push' || github.event.inputs.environment == 'dev' }}  
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Set Up Google Cloud SDK
        uses: 'google-github-actions/auth@v2'
        with:
          version: 'latest'
          credentials_json: ${{ secrets.GCP_KEY }}

      - name: Authenticate Docker to GCR
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Generate dynamic build number (if TAG_NAME not provided)
        id: generate_build_number
        run: |
          # Check if TAG_NAME is provided in the manual trigger
          if [ -z "${{ github.event.inputs.TAG_NAME }}" ]; then
            # Use Git commit SHA, GitHub Run number, and timestamp to create a unique tag
            COMMIT_SHA=${GITHUB_SHA:0:7}  # Get the first 7 characters of the commit SHA
            RUN_NUMBER=${GITHUB_RUN_NUMBER}  # GitHub sequential run number for this workflow
            TIMESTAMP=$(date +'%Y%m%d%H%M%S')  # Get current timestamp (e.g., 20231210153045)

            # Combine them to form a unique tag
            TAG_NAME="${COMMIT_SHA}-${RUN_NUMBER}-${TIMESTAMP}"
          else
            # Use the provided TAG_NAME if it exists
            TAG_NAME="${{ github.event.inputs.TAG_NAME }}"
          fi

          echo "Build Tag: $TAG_NAME"  # Display for debug purposes

          # Save the build tag as an output to be used in the next steps
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Build Docker Image
        id: build_image
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-ms-repository/pyappapi"
          docker build -t ${IMAGE_NAME}:${{ env.TAG_NAME }} .
          echo "image_tag_name=${{ env.TAG_NAME }}" >> "$GITHUB_OUTPUT"

      - name: Push Docker Image to GCR
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-app-ms-repository/pyappapi"
          docker push ${IMAGE_NAME}:${{ env.TAG_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure deploy only runs after the build job completes 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to environment
        run: |
          echo "Deploying to ${{ github.event.inputs.environment }}" 
          echo "Using image tag: ${{ github.event.inputs.TAG_NAME || env.TAG_NAME }}" # Use manual or generated TAG_NAME
